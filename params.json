{"name":"cgAutoCast","body":"cgAutoCast automatically type casts strings (usually from command line arguments) into basic python types\r\n\r\n\r\n## USAGE:\r\n\r\n**FIRST, make your functions callable from the command line by placing this at bottom of module:**\r\n\r\n    if __name__ == \"__main__\":\r\n        import sys\r\n        assert sys.argv[1] in globals(), \"Need name of fxn to run from command line!\"\r\n        fxnToRun = globals()[sys.argv[1]] \r\n        fxnToRun(*sys.argv[2:])\r\n\r\n**Now any function can be callable from the command line:**\r\n\r\n    #fxn name is first arg after module, arguments follow    \r\n    python name_of_module.py name_of_fxn arg1 arg2\r\n\r\n\r\n**SECOND, decorate your function with the autocast fxn:**\r\n\r\n    from cgAutoCast import autocast\r\n\r\n    @autocast\r\n    def important_fxn_name(numFoos, listOfFoos):\r\n        \r\n        cureForCancer = quickCancerCure(numFoos, listOfFoos)\r\n        print cureForCancer\r\n\r\n\r\n**Values passed from the command line will automatically be type casted:**\r\n(see cgAutoCast.py module test function)\r\n\r\n    python cgAutoCast.py test 1,2,3 True\r\n\r\n    #output\r\n    [1, 2, 3] True <type 'list'> <type 'bool'>\r\n\r\n\r\n## TIP:\r\n\r\nUsing \"grep def name_of_module.py\" will quickly show you fxns and arguments without opening the file:\r\n\r\n    >>>grep def cgAutoCast.py\r\n    def boolify(s):\r\n    def noneify(s):\r\n    def listify(s):\r\n    def estimateTypedValue(var):\r\n    def autocast(dFxn):\r\n        def wrapped(*c, **d):\r\n    def test(one, two):\r\n\r\n## NOTE:\r\n\r\nThe decorator makes sane conversions but the user must be careful in ambiguous cases.  For e.g., when intending to use a number in a file name the number must be re-cast into a string.","tagline":"Auto Cast Arguments From Command Line","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}